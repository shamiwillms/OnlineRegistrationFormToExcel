/**
 * 
 */
package xml_parser;

import java.io.FileOutputStream;
import java.util.Date;
import java.util.List;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

/**
 * @author willms
 *
 */
public class PdfPrinter {

	  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
	      Font.BOLD);
	  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
		      Font.NORMAL, BaseColor.RED);
	  private static Font blackFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
		      Font.NORMAL, BaseColor.BLACK);
	  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
	      Font.BOLD);
	  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
		      Font.BOLD);
	  

	public static void printOneFamilyPerPage(List<Family> families) {
		

		 try {
		      Document document = new Document();
		      PdfWriter.getInstance(document, new FileOutputStream("test.pdf"));
		      document.open();
		      addMetaData(document);
		      addTitlePage(document);

		      int i = 1;
		      for (Family r : families) {
		    	  addContent(document, r, i++);	
		      }
				
		      document.close();
		    } catch (Exception e) {
		      e.printStackTrace();
		    }
		
		
	}

	private static void addMetaData(Document document) {
		document.addTitle("MSCS Family Registrations");
		document.addSubject("MSCS Registration");
		//document.addKeywords("Java, PDF, iText");
		document.addAuthor("Menno Simons Christian School");
		document.addCreator("Menno Simons Christian School");
  }

  private static void addTitlePage(Document document)
      throws DocumentException {
    Paragraph preface = new Paragraph();
    // We add one empty line
    addEmptyLine(preface, 1);
    // Lets write a big header
    preface.add(new Paragraph("MSCS Family Registrations - 2013/2014", catFont));

    addEmptyLine(preface, 1);
    // Will create: Report generated by: _name, _date
    preface.add(new Paragraph("Report generated by: Shami Willms, " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        smallBold));
    addEmptyLine(preface, 1);
    preface.add(new Paragraph("This document contains family registration information from our on-line registration",
        smallBold));

    addEmptyLine(preface, 3);

    preface.add(new Paragraph("Note: This document is intended for official MSCS business and contains confidential information.",
        redFont));

    document.add(preface);
    // Start a new page
    document.newPage();
  }

  private static void addContent(Document document, Family r, int familyNum) throws DocumentException {
	  String title =  r.getTitle();
    Anchor anchor = new Anchor(title, catFont);
    anchor.setName(title);

    // Second parameter is the number of the chapter
    Chapter catPart = new Chapter(new Paragraph(anchor), familyNum);
    catPart.setNumberDepth(0);

    catPart.add(new Paragraph("Paragraph 1"));
    catPart.add(new Paragraph("Paragraph 2"));
    catPart.add(new Paragraph("Paragraph 3"));

    createTableRow(catPart, "Address", r.getAddress());
    
    // add a list
    createList(catPart);
    Paragraph paragraph = new Paragraph();
    addEmptyLine(paragraph, 5);
    catPart.add(paragraph);

    // now add all this to the document
    document.add(catPart);

  }


  private static void createTableRow(Section subCatPart, String s1, String s2)
      throws BadElementException {
    PdfPTable table = new PdfPTable(2);

    // t.setBorderColor(BaseColor.GRAY);
    // t.setPadding(4);
    // t.setSpacing(4);
    // t.setBorderWidth(1);

    table.addCell(s1);
    table.addCell(s2);

    subCatPart.add(table);

  }

  
  private static void createList(Section subCatPart) {
    com.itextpdf.text.List list = new com.itextpdf.text.List(true, false, 10);
    list.add(new ListItem("First point"));
    list.add(new ListItem("Second point"));
    list.add(new ListItem("Third point"));
    subCatPart.add(list);
  }

  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }
} 
